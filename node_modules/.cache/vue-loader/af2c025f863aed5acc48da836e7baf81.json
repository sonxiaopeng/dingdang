{"remainingRequest":"C:\\Users\\uid\\Desktop\\Dr.Dingdang\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!C:\\Users\\uid\\Desktop\\Dr.Dingdang\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\uid\\Desktop\\Dr.Dingdang\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\uid\\Desktop\\Dr.Dingdang\\src\\views\\epidemic\\Epidemic.vue?vue&type=template&id=c0557fb6&scoped=true&","dependencies":[{"path":"C:\\Users\\uid\\Desktop\\Dr.Dingdang\\src\\views\\epidemic\\Epidemic.vue","mtime":1611534674000},{"path":"C:\\Users\\uid\\Desktop\\Dr.Dingdang\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1610353156000},{"path":"C:\\Users\\uid\\Desktop\\Dr.Dingdang\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":1610353180000},{"path":"C:\\Users\\uid\\Desktop\\Dr.Dingdang\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1610353156000},{"path":"C:\\Users\\uid\\Desktop\\Dr.Dingdang\\node_modules\\vue-loader\\lib\\index.js","mtime":1610353180000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}