{"remainingRequest":"C:\\Users\\web\\Desktop\\myGit\\Dr.Dingdang\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!C:\\Users\\web\\Desktop\\myGit\\Dr.Dingdang\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\web\\Desktop\\myGit\\Dr.Dingdang\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\web\\Desktop\\myGit\\Dr.Dingdang\\src\\views\\epidemic\\Epidemic.vue?vue&type=template&id=c0557fb6&scoped=true&","dependencies":[{"path":"C:\\Users\\web\\Desktop\\myGit\\Dr.Dingdang\\src\\views\\epidemic\\Epidemic.vue","mtime":1610941277629},{"path":"C:\\Users\\web\\Desktop\\myGit\\Dr.Dingdang\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1610353155479},{"path":"C:\\Users\\web\\Desktop\\myGit\\Dr.Dingdang\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":1610353179710},{"path":"C:\\Users\\web\\Desktop\\myGit\\Dr.Dingdang\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1610353155479},{"path":"C:\\Users\\web\\Desktop\\myGit\\Dr.Dingdang\\node_modules\\vue-loader\\lib\\index.js","mtime":1610353179708}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}